from apscheduler.schedulers.background import BackgroundScheduler
from django.utils.timezone import now
# from myapp.models import Notification
from myapp.models import Event, Notification, Event_Request

# def check_and_update_notifications():
#     """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤"""
#     notifications = Notification.objects.filter(is_scheduled=True, scheduled_time__lte=now())
#     for notification in notifications:
#         notification.is_scheduled = False  # ‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á
#         notification.save()
    
#     print(f"‚úÖ ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å {notifications.count()} ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# def start_scheduler():
#     """‡πÄ‡∏£‡∏¥‡πà‡∏° Scheduler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows"""
#     scheduler = BackgroundScheduler()
#     scheduler.add_job(check_and_update_notifications, 'interval', minutes=1)  # ‚úÖ ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
#     scheduler.start()

def check_and_create_notifications():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï has_ended=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πâ‡∏≥"""

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
    events = Event.objects.filter(
        event_datetime__lte=now(),  # ‚úÖ ‡∏≠‡∏µ‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        has_ended=False  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    )

    for event in events:
        # üîπ ‡∏î‡∏∂‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
        participants = list(Event_Request.objects.filter(
            event=event, response_status="accepted"
        ).values_list('sender', flat=True))

        recipients = [event.created_by.id] + participants  # ‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        existing_notification = Notification.objects.filter(related_event=event, notification_type="‡∏≠‡∏∑‡πà‡∏ô ‡πÜ").exists()

        if not existing_notification:  # üî• ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
            review_link = f"/event/{event.id}/review/"
            message = f"‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° {event.event_name} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á? ‡∏°‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! <a href='{review_link}'>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</a>"

            for user_id in recipients:
                Notification.objects.create(
                    user_id=user_id,
                    message=message,
                    related_event=event,
                    notification_type="system",
                    is_read=False
                )

            # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πâ‡∏≥ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡πà‡∏≤ Event ‡∏ô‡∏µ‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            event.has_ended = True
            event.save()

            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Event {event.id} ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥!")

def start_scheduler():
    """‡πÄ‡∏£‡∏¥‡πà‡∏° Scheduler ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_and_create_notifications, 'interval', minutes=1)  # ‚úÖ ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    scheduler.start()